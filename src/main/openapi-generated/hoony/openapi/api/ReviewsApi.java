/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package hoony.openapi.api;

import hoony.openapi.model.GroupReviewResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "review", description = "the review API")
public interface ReviewsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /reviews : 리뷰 그룹의 모든 리뷰를 조회합니다.
     *
     * @param groupId 리뷰 그룹 아이디 (optional)
     * @return 해당 리뷰 그룹의 모든 리뷰를 반환합니다. (status code 200)
     */
    @Operation(
        operationId = "findReviews",
        summary = "리뷰 그룹의 모든 리뷰를 조회합니다.",
        tags = { "review" },
        responses = {
            @ApiResponse(responseCode = "200", description = "해당 리뷰 그룹의 모든 리뷰를 반환합니다.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GroupReviewResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/reviews",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GroupReviewResponse>> findReviews(
        @Parameter(name = "groupId", description = "리뷰 그룹 아이디", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupId", required = false) Long groupId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2024-07-29\", \"contentPreview\" : \"리뷰미 팀에서 멋쟁이 역할을 맡은 아루는~~~\", \"keyword\" : { \"keywordId\" : 2435, \"keywordName\" : \"의견을 잘 조율해요\" }, \"reviewId\" : 2435 }, { \"createdAt\" : \"2024-07-29\", \"contentPreview\" : \"리뷰미 팀에서 멋쟁이 역할을 맡은 아루는~~~\", \"keyword\" : { \"keywordId\" : 2435, \"keywordName\" : \"의견을 잘 조율해요\" }, \"reviewId\" : 2435 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
